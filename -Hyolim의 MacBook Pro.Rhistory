create_psa_sample <- function (sample_n) {
# parameters
my_params <-c ("v_cost",               # vaccine cost (including syringes): 2018 USD
"delivery_cost",        # delivery cost: 2018 USD
"tot_pop",              # total population in Phase 1
"vacc_pop",             # total number of vaccinated people
"postvacc_p1_ipd",      # post vaccination cases of IPD in Phase1
"postvacc_p1_opd",      # post vaccination cases of OPD in Phase1
"postvacc_p1",          # post vaccination cases (all)
"facility_cost",        # health facility cost of OPD : 2021 USD
"dmc_ipd",              # direct medical cost of IPD : 2021 USD
"dmc_opd",              # direct medical cost of OPD : 2021 USD
"dmc",                  # average dmc (for unvaccinated)
"dnmc_ipd",             # direct non-medical cost of IPD : 2021 USD
"dnmc_opd",             # direct non-medical csot of OPD : 2021 USD
"dnmc",                 # average dnmc (for unvaccinated)
"indirect_ipd",         # indirect cost of IPD : 2021 USD
"indirect_opd",         # indirect cost of OPD : 2021 USD
"indirect",             # average indirect cost (for unvaccinated)
"ve",                   # vaccine-effectiveness
"dw_ipd",               # disability weight of IPD
"dw_opd",               # disability weight of OPD (severe case)
"illness_duration_ipd", # illness duration of IPD: days
"illness_duration_opd", # illness duration of OPD: days
"cfr_ipd",              # case fatality rate of IPD
"cfr_opd",              # case fatality rate of OPD
"age_death",            # average age at death
"life_exp"   )          # reference life expectancy
# constant value
# "postvacc"        # post-vaccination case
# "vacc_pop"
# "postvacc_p1"
# trickle down uncertainty
# "prevacc",         # pre-vaccination case
# "totcost_vacc",    # total cost of vaccinated group
# "totcost_unvacc")  # total cost of unvaccinated group
# distributions for parameters
my_dists <- c("constant",
"gamma",
"constant",
"constant",
"constant",
"constant",
"constant",
"gamma",
"gamma",
"gamma",
"gamma",
"gamma",
"gamma",
"gamma",
"gamma",
"gamma",
"gamma",
"truncated-normal",
"truncated-normal",
"truncated-normal",
"gamma",
"gamma",
"truncated-normal",
"truncated-normal",
"normal",
"normal")
# parameter types
my_parameterization_types <-c ("val",
"mean, sd",
"val",
"val",
"val",
"val",
"val",
"mean, sd",
"mean, sd",
"mean, sd",
"mean, sd",
"mean, sd",
"mean, sd",
"mean, sd",
"mean, sd",
"mean, sd",
"mean, sd",
"mean, sd, ll, ul",
"mean, sd, ll, ul",
"mean, sd, ll, ul",
"mean, sd",
"mean, sd",
"mean, sd, ll, ul",
"mean, sd, ll, ul",
"mean, sd",
"mean, sd")
# values for parameters
my_dists_params <- list( c (2.96),
c (1.49, 1.38),
c (159831),
c (113420),
c (200),
c (459) ,
c (659),
c (97.33,  85.33),
c (234.77, 265.99),
c (115.38, 149.92),
c (183.34, 229.85),
c (48.59,  37.40),
c (21.49,  25.90),
c (36.91,  35.39),
c (77.54,  29.51),
c (74.29,  26.90),
c (76.13,  28.25),
c (.81,  2.05, .54, .926),
c (.21,  1.37, .19, .23),
c (.052,  1.37, .031, .079),
c (.040, .0153),
c (.046, .025),
c (.028, .211, .02, .036),
c (.019, .72, 0.01, 0.045),
c (7.56, 6.53),
c (72.68, 3.07))
# input samples for PSA
my_psa <- gen_psa_samp (params                 = my_params,
dists                  = my_dists,
parameterization_types = my_parameterization_types,
dists_params           = my_dists_params,
n                      = sample_n)
return (my_psa)
}
# ------------------------------------------------------------------------------
# Latin Hypercube Sampling
# ------------------------------------------------------------------------------
# https://stats.stackexchange.com/questions/495215/standard-error-standard-deviation-and-variance-confusion
set.seed (3)
runs <- 4000
# a design with n samples from k parameters
A <- randomLHS (n = runs,
k = 30)
# It is common to transform the margins of the design (the columns)
# into other distributions
# for gamma dist: a= shape (m^2/sigma^2), b= scale = 1/ (sigma^2/mean)
# (m is mean and sigma is SD)
# for beta dist function:
beta <- function(mu, var) {
alpha <- ((1 - mu) / var - 1 / mu) * mu ^ 2
beta <- alpha * (1 / mu - 1)
return(params = list(alpha = alpha, beta = beta))
}
# beta parameterization for VE
beta(0.816,  0.01982924)
# beta parameterization for DW
beta(0.21, 0.0001)
beta(0.052, 0.0001)
# beta parameterization for CFR
beta(0.028, 0.00007972)
beta(0.019, 0.00001666)
lhs_sample <- matrix (nrow = nrow(A), ncol = ncol(A))
lhs_sample [,1]  <- 2.93
lhs_sample [,2]  <- qgamma (p = A[,2], shape = ((1.52/0.520408163)^2), rate = (1.52/(0.520408163)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,3]  <- 0.3218391* 159831
lhs_sample [,4]  <- 0.3295019*159831
lhs_sample [,5]  <- 0.348659 * 159831
lhs_sample [,6]  <- 20405 *(113420/79836)
lhs_sample [,7]  <- 28911*(113420/79836)
lhs_sample [,8]  <- 30520*(113420/79836)
lhs_sample [,9]  <- qunif (p = A[,9], min =128.705, max = 588.66, lower.tail = TRUE, log.p = FALSE)
lhs_sample [,10]  <- qunif (p = A[,10], min = 429.7415, max = 1772.195, lower.tail = TRUE, log.p = FALSE)
lhs_sample [,11]  <- qunif (p = A[,11], min = 438.77, max = 1766.42, lower.tail = TRUE, log.p = FALSE)
lhs_sample [,12]  <- qgamma (p = A[,12], shape = ((97.33/12.33)^2), rate = (97.33/(12.33)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,13]  <- qgamma (p = A[,13], shape = ((234.7688/265.9934)^2), rate = (234.7688/(265.9934)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,14] <- qgamma (p = A[,14], shape = ((115.3841/149.9214)^2), rate = (115.3841/(149.9214)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,15] <- qgamma (p = A[,15], shape = ((183.3415/229.8478)^2), rate = (183.3415/(229.8478)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,16] <- qgamma (p = A[,16], shape = ((48.58656/37.39749)^2), rate = (48.58656/(37.39749)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,17] <- qgamma (p = A[,17],  shape = ((21.48999/25.8971)^2), rate = (21.48999/(25.8971)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,18] <- qgamma (p = A[,18],  shape = ((36.91419/35.39041)^2), rate = (36.91419/(35.39041)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,19] <- qgamma (p = A[,19],  shape = ((77.53769/29.51196)^2), rate = (77.53769/(29.51196)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,20] <- qgamma (p = A[,20],   shape = ((74.28838/26.90198)^2), rate = (74.28838/(26.90198)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,21] <- qgamma (p = A[,21],  shape = ((76.13798/28.24641)^2),rate = (76.13798/(28.24641)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,22] <- qbeta  (p = A[,22], shape1 = 5.362628, shape2 = 1.20922, ncp=0,lower.tail = TRUE, log.p = FALSE)
lhs_sample [,23] <- qbeta (p = A[,23], shape1 = 348.18, shape2 = 1309.82, ncp=0, lower.tail = TRUE, log.p = FALSE)
lhs_sample [,24] <- qbeta (p = A[,24], shape1 = 25.58192, shape2 = 466.3781, ncp = 0, lower.tail = TRUE, log.p = FALSE)
lhs_sample [,25] <- qgamma (p = A[,25], shape = ((0.0404/0.01532)^2), rate = (0.0404/(0.01532)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,26] <- qgamma (p = A[,26], shape = ((0.04559688/ 0.02500143)^2), rate = (0.04559688/(0.02500143)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,27] <- qbeta (p = A[,27], shape1 = 9.531057, shape2 = 330.8638, ncp = 0, lower.tail = TRUE, log.p = FALSE)
lhs_sample [,28] <- qbeta (p = A[,28], shape1 =  21.23796, shape2 = 1096.55, ncp = 0, lower.tail = TRUE, log.p = FALSE)
lhs_sample [,29] <- qgamma (p = A[,29], shape = ((7.56/0.527)^2), rate = (7.56/(0.527)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,30] <- qnorm (p = A[,30], mean = 72.68, sd = 1.73979, lower.tail = TRUE, log.p = FALSE)
# change the name of the lhs_sample
cols <- c(  "v_cost",
"delivery_cost",
"tot_pop_age1",
"tot_pop_age2",
"tot_pop_age3",
"vacc_pop_age1",
"vacc_pop_age2",
"vacc_pop_age3",
"prevacc_age1",
"prevacc_age2",
"prevacc_age3",
"facility_cost",
"dmc_ipd",
"dmc_opd",
"dmc",
"dnmc_ipd",
"dnmc_opd",
"dnmc",
"indirect_ipd",
"indirect_opd",
"indirect",
"ve",
"dw_ipd",
"dw_opd",
"illness_duration_ipd",
"illness_duration_opd",
"cfr_ipd",
"cfr_opd",
"age_death",
"life_exp" )
colnames (lhs_sample) <- cols
# change the matrix into the data table. (R doesn't recognize atomic values inside matrix)
lhs_sample <- as.data.table (lhs_sample)
# function - computer icer for a given input parameter sample
compute_icer <- function (v_cost            = 2.93,
delivery_cost,
tot_pop_age1      = 0.3218391* 159831,
tot_pop_age2      = 0.3295019*159831,
tot_pop_age3      = 0.348659 * 159831,
vacc_pop_age1     = 20405 *(113420/79836),
vacc_pop_age2     = 28911*(113420/79836),
vacc_pop_age3     = 30520*(113420/79836),
prevacc_age1      = 319.76,
prevacc_age2      = 917.015,
prevacc_age3      = 912.945,
facility_cost,
dmc_ipd,
dmc_opd,
dmc,
dnmc_ipd,
dnmc_opd,
dnmc,
indirect_ipd,
indirect_opd,
indirect,
ve,
dw_ipd,
dw_opd,
illness_duration_ipd,
illness_duration_opd,
cfr_ipd,
cfr_opd,
age_death,
life_exp) {
# prevacc age-group1 (IPD)
prevacc_age1_ipd <- prevacc_age1 * 0.011
# prevacc age-group1 (OPD)
prevacc_age1_opd <- 1 - prevacc_age1_ipd
# prevacc age-group2 (IPD)
prevacc_age2_ipd <- prevacc_age2 * 0.011
# prevacc age-group2 (OPD)
prevacc_age2_opd <- 1 - prevacc_age2_ipd
# prevacc age-group3 (IPD)
prevacc_age3_ipd <- prevacc_age3 * 0.011
# prevacc age-group3 (OPD)
prevacc_age3_opd <- 1 - prevacc_age3_ipd
# post-vacc age-group1
postvacc_age1 <- (prevacc_age1)*(1 - ve*(vacc_pop_age1/tot_pop_age1))
# post-vacc age-group2
postvacc_age2 <- (prevacc_age2)*(1 - ve*(vacc_pop_age2/tot_pop_age2))
# post-vacc age-group3
postvacc_age3 <- (prevacc_age3)*(1 - ve*(vacc_pop_age3/tot_pop_age3))
# post-vacc age-group1 (IPD)
postvacc_age1_ipd <- (prevacc_age1_ipd)*(1 - ve*(vacc_pop_age1/tot_pop_age1))
# post-vacc age-group1 (OPD)
postvacc_age1_opd <- (prevacc_age1_opd)*(1 - ve*(vacc_pop_age1/tot_pop_age1))
# post-vacc age-group2 (IPD)
postvacc_age2_ipd <- (prevacc_age2_ipd)*(1 - ve*(vacc_pop_age2/tot_pop_age2))
# post-vacc age-group2 (OPD)
postvacc_age2_opd <- (prevacc_age2_opd)*(1 - ve*(vacc_pop_age2/tot_pop_age2))
# post-vacc age-group3 (IPD)
postvacc_age3_ipd <- (prevacc_age3_ipd)*(1 - ve*(vacc_pop_age3/tot_pop_age3))
# post-vacc age-group3 (OPD)
postvacc_age3_opd <- (prevacc_age3_opd)*(1 - ve*(vacc_pop_age3/tot_pop_age3))
# case-averted age-group1 (per 100 000)
case_avert_age1 <- (prevacc_age1 - postvacc_age1)
# case-averted age-group2 (per 100 000)
case_avert_age2 <- (prevacc_age2 - postvacc_age2)
# case-averted age-group3 (per 100 000)
case_avert_age3 <- (prevacc_age3 - postvacc_age3)
# case-averted age-group1 IPD (per 100 000)
case_avert_age1_ipd <- (case_avert_age1) * 0.011
# case-averted age-group1 OPD (per 100 000)
case_avert_age1_opd <- 1 - (case_avert_age1_ipd)
# case-averted age-group2 IPD (per 100 000)
case_avert_age2_ipd <- (case_avert_age2) * 0.011
# case-averted age-group2 OPD (per 100 000)
case_avert_age2_opd <- 1 - (case_avert_age2_ipd)
# case-averted age-group3 IPD (per 100 000)
case_avert_age3_ipd <- (case_avert_age3) * 0.011
# case-averted age-group3 OPD (per 100 000)
case_avert_age3_opd <- 1 - (case_avert_age3_ipd)
# incremental cost of inpatients
incremental_cost_ipd   <- (v_cost + delivery_cost) * (vacc_pop_age1 + vacc_pop_age2 + vacc_pop_age3) - (case_avert_age1_ipd + case_avert_age2_ipd + case_avert_age3_ipd)*(facility_cost + dmc_ipd + dnmc_ipd)
# incremental cost of outpatients
incremental_cost_opd   <- (v_cost + delivery_cost) * (vacc_pop_age1 + vacc_pop_age2 + vacc_pop_age3) - (case_avert_age1_opd + case_avert_age2_opd + case_avert_age3_opd)*(facility_cost + dmc_opd + dnmc_opd)
# incremental cost total (used for the final value as a delta C)
incremental_cost_total <- (v_cost + delivery_cost)* (vacc_pop_age1 + vacc_pop_age2 + vacc_pop_age3) - (case_avert_age1 + case_avert_age2 + case_avert_age3)*(facility_cost + dmc +dnmc)
# total averted cases (all age group)
case_avert_total      <- (case_avert_age1 + case_avert_age2 + case_avert_age3)
# YLL calculation component: amount of years of life loss between life-expectancy and average age at death
distance               <- (life_exp) - (age_death)
# number of deaths in no-vaccination situation (inpatients)
pre_death_ipd          <- (cfr_ipd)*(prevacc_age1_ipd + prevacc_age2_ipd + prevacc_age3_ipd)
# number of deaths in no-vaccination situation (outpatients)
pre_death_opd          <- (cfr_opd)*(prevacc_age1_opd + prevacc_age2_opd + prevacc_age3_opd)
# number of deaths in no-vaccination situation (total)
pre_death_total        <- (pre_death_ipd) + (pre_death_opd)
# number of deaths post-vaccination situation (inpatients)
post_death_ipd         <- (cfr_ipd)*(postvacc_age1_ipd + postvacc_age2_ipd + postvacc_age3_ipd)
# number of deaths post-vaccination situation (outpatients)
post_death_opd         <- (cfr_opd)*(postvacc_age1_opd + postvacc_age2_opd + postvacc_age3_opd)
# number of deaths post-vaccination situation (total)
post_death_total       <-  (post_death_ipd) + (post_death_opd)
# number of deaths averted (total)
death_averted          <-  (pre_death_total) - (post_death_total)
# number of deaths averted (inpatients)
death_averted_ipd      <-  (pre_death_ipd) - (post_death_ipd)
# number of deaths averted (outpatients)
death_averted_opd      <-  (pre_death_opd) - (post_death_opd)
# YLL of inpatients in the pre-vaccination situation (total number of inpatient deaths * amount of years loss per person)
yll_pre_ipd            <- (pre_death_ipd)*(distance)
# YLL of outpatients in the pre-vaccination situation (total number of outpatient deaths * amount of years loss per person)
yll_pre_opd            <- (pre_death_opd)*(distance)
# YLL total in pre-vaccination
yll_pre_total          <- (yll_pre_ipd)  + (yll_pre_opd)
# amount of years loss for inpatients in post-vaccination
yll_post_ipd           <- (post_death_ipd)*(distance)
# amount of years loss for outpatients in post-vaccination
yll_post_opd           <- (post_death_opd)*(distance)
# total amount of years loss in post-vaccination
yll_post_total         <- (yll_post_ipd) + (yll_post_opd)
# years of life with disease for inpatients in pre-vacc situation (number of inpatient cases * disability weight * total illness duration presented as years)
yld_pre_ipd            <- (prevacc_age1_ipd + prevacc_age2_ipd + prevacc_age3_ipd)*(dw_ipd)*(illness_duration_ipd)
# years of life with disease for outpatients in pre-vacc situation (number of outpatient cases * disability weight * total illness duration presented as years)
yld_pre_opd            <- (prevacc_age1_opd + prevacc_age2_opd + prevacc_age3_opd)*(dw_opd)*(illness_duration_opd)
# total YLD of pre-vaccination typhoid cases
yld_pre_total          <- (yld_pre_ipd) + (yld_pre_opd)
# total DALYs for pre-vaccination typhoid cases (YLL total + YLD total)
dalys_pre_total        <- (yll_pre_total) + (yld_pre_total)
# years of life with disease for inpatients in post-vacc situation (number of inpatient cases * disability weight * total illness duration presented as years)
yld_post_ipd           <- (postvacc_age1_ipd + postvacc_age2_ipd + postvacc_age3_ipd)*(dw_ipd)*(illness_duration_ipd)
# years of life with disease for outpatients in post-vacc situation (number of outpatient cases * disability weight * total illness duration presented as years)
yld_post_opd           <- (postvacc_age1_opd + postvacc_age2_opd + postvacc_age3_opd)*(dw_opd)*(illness_duration_opd)
# total YLD for post-vaccination typhoid cases (YLL total + YLD total)
yld_post_total         <- (yld_post_ipd) + (yld_post_opd)
# total DALYs for post-vaccination typhoid cases (YLL total + YLD total)
dalys_post_total       <- (yll_post_total) + (yld_post_total)
# YLD averted for inpatients
yld_averted_ipd        <- (case_avert_age1_ipd + case_avert_age2_ipd + case_avert_age3_ipd)* (dw_ipd) *(illness_duration_ipd)
# YLD averted for outpatients
yld_averted_opd        <- (case_avert_age1_opd + case_avert_age2_opd + case_avert_age3_opd)* (dw_opd) *(illness_duration_opd)
# total YLD averted
yld_averted_total      <- (yld_averted_ipd) + (yld_averted_opd)
# YLL averted  for inpatients
yll_averted_ipd        <- (yll_pre_ipd)  -(yll_post_ipd)
# YLL averted for outpatients
yll_averted_opd        <- (yll_pre_opd)  -(yll_post_opd)
# total YLL averted
yll_averted_total      <- (yll_averted_ipd) + (yll_averted_opd)
# DALYs averted for inpatients
incremental_daly_ipd   <- (yld_averted_ipd) + (yll_averted_ipd)
# DALYs averted for outpatients
incremental_daly_opd   <- (yld_averted_opd) + (yll_averted_opd)
# total DALYs averted (used for final ICER value in the paper: delta E as a denominator)
incremental_daly_total <- (dalys_pre_total) - (dalys_post_total)
# ICER for inpatients presented as cost-per-DALY averted
icer_daly_ipd          <- incremental_cost_ipd / incremental_daly_ipd
# ICER for outpatients presented as cost-per-DALY averted
icer_daly_opd          <- incremental_cost_opd / incremental_daly_opd
# ICER presented as cost-per-DALY averted (used in the paper as a final value)
icer_daly_total        <- incremental_cost_total / incremental_daly_total
return (list (prevacc_age1_ipd              = prevacc_age1_ipd,
prevacc_age1_opd              = prevacc_age1_opd,
prevacc_age2_ipd              = prevacc_age2_ipd,
prevacc_age2_opd              = prevacc_age2_opd,
prevacc_age3_ipd              = prevacc_age3_ipd,
prevacc_age3_opd              = prevacc_age3_opd,
postvacc_age1                 = postvacc_age1,
postvacc_age2                 = postvacc_age2,
postvacc_age3                 = postvacc_age3,
postvacc_age1_ipd             = postvacc_age1_ipd,
postvacc_age1_opd             = postvacc_age1_opd,
postvacc_age2_ipd             = postvacc_age2_ipd,
postvacc_age2_opd             = postvacc_age2_opd,
postvacc_age3_ipd             = postvacc_age3_ipd,
postvacc_age3_opd             = postvacc_age3_opd,
case_avert_age1               = case_avert_age1,
case_avert_age2               = case_avert_age2,
case_avert_age3               = case_avert_age3,
case_avert_age1_ipd           = case_avert_age1_ipd,
case_avert_age1_opd           = case_avert_age1_opd,
case_avert_age2_ipd           = case_avert_age2_ipd,
case_avert_age2_opd           = case_avert_age2_opd,
case_avert_age3_ipd           = case_avert_age3_ipd,
case_avert_age3_opd           = case_avert_age3_opd,
incremental_cost_ipd          = incremental_cost_ipd,
incremental_cost_opd          = incremental_cost_opd,
incremental_cost_total        = incremental_cost_total,
case_avert_total              = case_avert_total,
pre_death_ipd                 = pre_death_ipd,
pre_death_opd                 = pre_death_opd,
pre_death_total               = pre_death_total,
post_death_ipd                = post_death_ipd,
post_death_opd                = post_death_opd,
post_death_total              = post_death_total,
death_averted                 = death_averted,
death_averted_ipd             = death_averted_ipd,
death_averted_opd             = death_averted_opd,
dalys_pre_total               = dalys_pre_total,
dalys_post_total              = dalys_post_total,
incremental_daly_total        = incremental_daly_total,
icer_daly_ipd                 = icer_daly_ipd,
icer_daly_opd                 = icer_daly_opd,
icer_daly_total               = icer_daly_total))
}
# start time
tic ()
print (Sys.time ())
# create empty icer data table
icer_dt <- data.table (run_id = 1:runs)
# combine data tables -- run_id & lhs sample
icer_dt <- cbind (icer_dt, lhs_sample)
# loop through psa sample to generate icers
for (i in 1:runs) {
icer_sample <- compute_icer (lhs_sample$v_cost                    [i],
lhs_sample$delivery_cost             [i],
lhs_sample$tot_pop_age1              [i],
lhs_sample$tot_pop_age2              [i],
lhs_sample$tot_pop_age3              [i],
lhs_sample$vacc_pop_age1             [i],
lhs_sample$vacc_pop_age2             [i],
lhs_sample$vacc_pop_age3             [i],
lhs_sample$prevacc_age1              [i],
lhs_sample$prevacc_age2              [i],
lhs_sample$prevacc_age3              [i],
lhs_sample$facility_cost             [i],
lhs_sample$dmc_ipd                   [i],
lhs_sample$dmc_opd                   [i],
lhs_sample$dmc                       [i],
lhs_sample$dnmc_ipd                  [i],
lhs_sample$dnmc_opd                  [i],
lhs_sample$dnmc                      [i],
lhs_sample$indirect_ipd              [i],
lhs_sample$indirect_opd              [i],
lhs_sample$indirect                  [i],
lhs_sample$ve                        [i],
lhs_sample$dw_ipd                    [i],
lhs_sample$dw_opd                    [i],
lhs_sample$illness_duration_ipd      [i],
lhs_sample$illness_duration_opd      [i],
lhs_sample$cfr_ipd                   [i],
lhs_sample$cfr_opd                   [i],
lhs_sample$age_death                 [i],
lhs_sample$life_exp                  [i])
icer_dt [i, `:=` ( incremental_cost_ipd            = icer_sample$incremental_cost_ipd,
incremental_cost_opd            = icer_sample$incremental_cost_opd,
incremental_cost_total          = icer_sample$incremental_cost_total,
case_avert_age1                 = icer_sample$case_avert_age1,
case_avert_age2                 = icer_sample$case_avert_age2,
case_avert_age3                 = icer_sample$case_avert_age3,
pre_death_ipd                   = icer_sample$pre_death_ipd,
pre_death_opd                   = icer_sample$pre_death_opd,
pre_death_total                 = icer_sample$pre_death_total,
post_death_ipd                  = icer_sample$post_death_ipd,
post_death_opd                  = icer_sample$post_death_opd,
post_death_total                = icer_sample$post_death_total,
death_averted                   = icer_sample$death_averted,
death_averted_ipd               = icer_sample$death_averted_ipd,
death_averted_opd               = icer_sample$death_averted_opd,
dalys_pre_total                 = icer_sample$dalys_pre_total,
dalys_post_total                = icer_sample$dalys_post_total,
incremental_daly_total          = icer_sample$incremental_daly_total,
icer_daly_ipd                   = icer_sample$icer_daly_ipd,
icer_daly_opd                   = icer_sample$icer_daly_opd,
icer_daly_total                 = icer_sample$icer_daly_total
)]
}
# icer plot
options(scipen=9999)
plot ( x = icer_dt$incremental_daly_total, y =icer_dt$incremental_cost_total)
# cea plane
cea_plane <- ggplot(data = icer_dt, aes(x=incremental_daly_total,
y=incremental_cost_total))+
geom_point() +
xlim(-5000, 5000) + ylim(-6000000, 6000000) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
xlab("DALYs averted") +
ylab("Incremental cost") +
theme_bw()
cea_plane
mean(icer_daly_total)
mean(icer_dt$icer_daly_total)
