lower.tail = TRUE, log.p = FALSE)
lhs_sample [,8] <- qgamma (p = A[,8], shape = ((115.3841/149.9214)^2), rate = (115.3841/(149.9214)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,9] <- qgamma (p = A[,9], shape = ((183.3415/229.8478)^2), rate = (183.3415/(229.8478)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,10] <- qgamma (p = A[,10], shape = ((48.58656/37.39749)^2), rate = (48.58656/(37.39749)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,11] <- qgamma (p = A[,11],  shape = ((21.48999/25.8971)^2), rate = (21.48999/(25.8971)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,12] <- qgamma (p = A[,12],  shape = ((36.91419/35.39041)^2), rate = (36.91419/(35.39041)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,13] <- qgamma (p = A[,13],  shape = ((77.53769/29.51196)^2), rate = (77.53769/(29.51196)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,14] <- qgamma (p = A[,14],   shape = ((74.28838/26.90198)^2), rate = (74.28838/(26.90198)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,15] <- qgamma (p = A[,15],  shape = ((76.13798/28.24641)^2),rate = (76.13798/(28.24641)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,16] <- qbeta  (p = A[,16], shape1 = 5.362628, shape2 = 1.20922, ncp=0,lower.tail = TRUE, log.p = FALSE)
lhs_sample [,17] <- qbeta (p = A[,17], shape1 = 348.18, shape2 = 1309.82, ncp=0, lower.tail = TRUE, log.p = FALSE)
lhs_sample [,18] <- qbeta (p = A[,18], shape1 = 25.58192, shape2 = 466.3781, ncp = 0, lower.tail = TRUE, log.p = FALSE)
lhs_sample [,19] <- qgamma (p = A[,19], shape = ((0.0404/0.01532)^2), rate = (0.0404/(0.01532)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,20] <- qgamma (p = A[,20], shape = ((0.04559688/ 0.02500143)^2), rate = (0.04559688/(0.02500143)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,21] <- qbeta (p = A[,21], shape1 = 9.531057, shape2 = 330.8638, ncp = 0, lower.tail = TRUE, log.p = FALSE)
lhs_sample [,22] <- qbeta (p = A[,22], shape1 =  21.23796, shape2 = 1096.55, ncp = 0, lower.tail = TRUE, log.p = FALSE)
lhs_sample [,23] <- qgamma (p = A[,23], shape = ((7.56/0.527)^2), rate = (7.56/(0.527)^2),
lower.tail = TRUE, log.p = FALSE)
lhs_sample [,24] <- qnorm (p = A[,24], mean = 72.68, sd = 1.73979, lower.tail = TRUE, log.p = FALSE)
# change the name of the lhs_sample
cols <- c(  "v_cost",
"delivery_cost",
"tot_pop",
"vacc_pop",
"prevacc",
"facility_cost",
"dmc_ipd",
"dmc_opd",
"dmc",
"dnmc_ipd",
"dnmc_opd",
"dnmc",
"indirect_ipd",
"indirect_opd",
"indirect",
"ve",
"dw_ipd",
"dw_opd",
"illness_duration_ipd",
"illness_duration_opd",
"cfr_ipd",
"cfr_opd",
"age_death",
"life_exp" )
colnames (lhs_sample) <- cols
# change the matrix into the data table. (R doesn't recognize atomic values inside matrix)
lhs_sample <- as.data.table (lhs_sample)
# function - computer icer for a given input parameter sample
compute_icer <- function (v_cost            = 3.274093,
delivery_cost,
tot_pop           = 159831,
vacc_pop          = 113420,
prevacc,
facility_cost,
dmc_ipd,
dmc_opd,
dmc,
dnmc_ipd,
dnmc_opd,
dnmc,
indirect_ipd,
indirect_opd,
indirect,
ve,
dw_ipd,
dw_opd,
illness_duration_ipd,
illness_duration_opd,
cfr_ipd,
cfr_opd,
age_death,
life_exp) {
# prevacc (IPD)
prevacc_ipd <- prevacc * 0.011
# prevacc (OPD)
prevacc_opd <- prevacc - prevacc_ipd
# post-vacc
postvacc <-  (prevacc)*(1 - ve*(vacc_pop/tot_pop))
# post-vacc (IPD)
postvacc_ipd <- (prevacc_ipd)*(1 - ve*(vacc_pop/tot_pop))
# post-vacc (OPD)
postvacc_opd <- postvacc - postvacc_ipd
# case-averted (per 100 000)
case_avert <- (prevacc - postvacc)
# case-averted IPD (per 100 000)
case_avert_ipd <- (case_avert) * 0.011
# case-averted OPD (per 100 000)
case_avert_opd <- (case_avert) - (case_avert_ipd)
# incremental cost of inpatients
incremental_cost_ipd   <- (v_cost + delivery_cost) * (vacc_pop) - (case_avert_ipd)*(facility_cost + dmc_ipd + dnmc_ipd)
# incremental cost of outpatients
incremental_cost_opd   <- (v_cost + delivery_cost) * (vacc_pop) - (case_avert_opd)*(facility_cost + dmc_opd + dnmc_opd)
# incremental cost total (used for the final value as a delta C)
incremental_cost_total <-  (v_cost + delivery_cost)* (vacc_pop) - (case_avert)*(facility_cost + dmc +dnmc + indirect)
# YLL calculation component: amount of years of life loss between life-expectancy and average age at death
distance               <- (life_exp) - (age_death)
# number of deaths in no-vaccination situation (inpatients)
pre_death_ipd          <- (cfr_ipd)*(prevacc_ipd)
# number of deaths in no-vaccination situation (outpatients)
pre_death_opd          <- (cfr_opd)*(prevacc_opd)
# number of deaths in no-vaccination situation (total)
pre_death_total        <- (pre_death_ipd) + (pre_death_opd)
# number of deaths post-vaccination situation (inpatients)
post_death_ipd         <- (cfr_ipd)*(postvacc_ipd)
# number of deaths post-vaccination situation (outpatients)
post_death_opd         <- (cfr_opd)*(postvacc_opd)
# number of deaths post-vaccination situation (total)
post_death_total       <-  (post_death_ipd) + (post_death_opd)
# number of deaths averted (total)
death_averted          <-  (pre_death_total) - (post_death_total)
# number of deaths averted (inpatients)
death_averted_ipd      <-  (pre_death_ipd) - (post_death_ipd)
# number of deaths averted (outpatients)
death_averted_opd      <-  (pre_death_opd) - (post_death_opd)
# YLL of inpatients in the pre-vaccination situation (total number of inpatient deaths * amount of years loss per person)
yll_pre_ipd            <- (pre_death_ipd)*(distance)
# YLL of outpatients in the pre-vaccination situation (total number of outpatient deaths * amount of years loss per person)
yll_pre_opd            <- (pre_death_opd)*(distance)
# YLL total in pre-vaccination
yll_pre_total          <- (yll_pre_ipd)  + (yll_pre_opd)
# amount of years loss for inpatients in post-vaccination
yll_post_ipd           <- (post_death_ipd)*(distance)
# amount of years loss for outpatients in post-vaccination
yll_post_opd           <- (post_death_opd)*(distance)
# total amount of years loss in post-vaccination
yll_post_total         <- (yll_post_ipd) + (yll_post_opd)
# years of life with disease for inpatients in pre-vacc situation (number of inpatient cases * disability weight * total illness duration presented as years)
yld_pre_ipd            <- (prevacc_ipd)*(dw_ipd)*(illness_duration_ipd)
# years of life with disease for outpatients in pre-vacc situation (number of outpatient cases * disability weight * total illness duration presented as years)
yld_pre_opd            <- (prevacc_opd)*(dw_opd)*(illness_duration_opd)
# total YLD of pre-vaccination typhoid cases
yld_pre_total          <- (yld_pre_ipd) + (yld_pre_opd)
# total DALYs for pre-vaccination typhoid cases (YLL total + YLD total)
dalys_pre_total        <- (yll_pre_total) + (yld_pre_total)
# years of life with disease for inpatients in post-vacc situation (number of inpatient cases * disability weight * total illness duration presented as years)
yld_post_ipd           <- (postvacc_ipd)*(dw_ipd)*(illness_duration_ipd)
# years of life with disease for outpatients in post-vacc situation (number of outpatient cases * disability weight * total illness duration presented as years)
yld_post_opd           <- (postvacc_opd)*(dw_opd)*(illness_duration_opd)
# total YLD for post-vaccination typhoid cases (YLL total + YLD total)
yld_post_total         <- (yld_post_ipd) + (yld_post_opd)
# total DALYs for post-vaccination typhoid cases (YLL total + YLD total)
dalys_post_total       <- (yll_post_total) + (yld_post_total)
# YLD averted for inpatients
yld_averted_ipd        <- (case_avert_ipd)* (dw_ipd) *(illness_duration_ipd)
# YLD averted for outpatients
yld_averted_opd        <- (case_avert_opd)* (dw_opd) *(illness_duration_opd)
# total YLD averted
yld_averted_total      <- (yld_averted_ipd) + (yld_averted_opd)
# YLL averted  for inpatients
yll_averted_ipd        <- (yll_pre_ipd)  -(yll_post_ipd)
# YLL averted for outpatients
yll_averted_opd        <- (yll_pre_opd)  -(yll_post_opd)
# total YLL averted
yll_averted_total      <- (yll_averted_ipd) + (yll_averted_opd)
# DALYs averted for inpatients
incremental_daly_ipd   <- (yld_averted_ipd) + (yll_averted_ipd)
# DALYs averted for outpatients
incremental_daly_opd   <- (yld_averted_opd) + (yll_averted_opd)
# total DALYs averted (used for final ICER value in the paper: delta E as a denominator)
incremental_daly_total <- (dalys_pre_total) - (dalys_post_total)
# ICER for inpatients presented as cost-per-DALY averted
icer_daly_ipd          <- incremental_cost_ipd / incremental_daly_ipd
# ICER for outpatients presented as cost-per-DALY averted
icer_daly_opd          <- incremental_cost_opd / incremental_daly_opd
# ICER presented as cost-per-DALY averted (used in the paper as a final value)
icer_daly_total        <- incremental_cost_total / incremental_daly_total
return (list (prevacc                          = prevacc,
prevacc_ipd                      = prevacc_ipd,
prevacc_opd                      = prevacc_opd,
postvacc                         = postvacc,
postvacc_ipd                     = postvacc_ipd,
postvacc_opd                     = postvacc_opd,
case_avert                       = case_avert,
case_avert_ipd                   = case_avert_ipd,
case_avert_opd                   = case_avert_opd,
incremental_cost_ipd             = incremental_cost_ipd,
incremental_cost_opd             = incremental_cost_opd,
incremental_cost_total           = incremental_cost_total,
pre_death_ipd                    = pre_death_ipd,
pre_death_opd                    = pre_death_opd,
pre_death_total                  = pre_death_total,
post_death_ipd                   = post_death_ipd,
post_death_opd                   = post_death_opd,
post_death_total                 = post_death_total,
death_averted                    = death_averted,
death_averted_ipd                = death_averted_ipd,
death_averted_opd                = death_averted_opd,
yll_pre_ipd                      = yll_pre_ipd,
yll_pre_opd                      = yll_pre_opd,
yll_pre_total                    = yll_pre_total,
yll_post_ipd                     = yll_post_ipd,
yll_post_opd                     = yll_post_opd,
yll_post_total                   = yll_post_total,
yld_pre_ipd                      = yld_pre_ipd,
yld_pre_opd                      = yld_pre_opd,
yld_pre_total                    = yld_pre_total,
dalys_pre_total                  = dalys_pre_total,
yld_post_ipd                     = yld_post_ipd,
yld_post_opd                     = yld_post_opd,
yld_post_total                   = yld_post_total,
dalys_post_total                 = dalys_post_total,
yld_averted_ipd                  = yld_averted_ipd,
yld_averted_opd                  = yld_averted_opd,
yld_averted_total                = yld_averted_total,
yll_averted_ipd                  = yll_averted_ipd,
yll_averted_opd                  = yll_averted_opd,
yll_averted_total                = yll_averted_total,
incremental_daly_ipd             = incremental_daly_ipd,
incremental_daly_opd             = incremental_daly_opd,
incremental_daly_total           = incremental_daly_total,
icer_daly_ipd                    = icer_daly_ipd,
icer_daly_opd                    = icer_daly_opd,
icer_daly_total                  = icer_daly_total))
}
# start time
tic ()
print (Sys.time ())
# create empty icer data table
icer_dt <- data.table (run_id = 1:runs)
# combine data tables -- run_id & lhs sample
icer_dt <- cbind (icer_dt, lhs_sample)
# loop through psa sample to generate icers
for (i in 1:runs) {
icer_sample <- compute_icer (lhs_sample$v_cost                    [i],
lhs_sample$delivery_cost             [i],
lhs_sample$tot_pop                   [i],
lhs_sample$vacc_pop                  [i],
lhs_sample$prevacc                   [i],
lhs_sample$facility_cost             [i],
lhs_sample$dmc_ipd                   [i],
lhs_sample$dmc_opd                   [i],
lhs_sample$dmc                       [i],
lhs_sample$dnmc_ipd                  [i],
lhs_sample$dnmc_opd                  [i],
lhs_sample$dnmc                      [i],
lhs_sample$indirect_ipd              [i],
lhs_sample$indirect_opd              [i],
lhs_sample$indirect                  [i],
lhs_sample$ve                        [i],
lhs_sample$dw_ipd                    [i],
lhs_sample$dw_opd                    [i],
lhs_sample$illness_duration_ipd      [i],
lhs_sample$illness_duration_opd      [i],
lhs_sample$cfr_ipd                   [i],
lhs_sample$cfr_opd                   [i],
lhs_sample$age_death                 [i],
lhs_sample$life_exp                  [i])
icer_dt [i, `:=` ( prevacc                         = icer_sample$prevacc,
prevacc_ipd                     = icer_sample$prevacc_ipd,
prevacc_opd                     = icer_sample$prevacc_opd,
postvacc                        = icer_sample$postvacc,
postvacc_ipd                    = icer_sample$postvacc_ipd,
postvacc_opd                    = icer_sample$postvacc_opd,
case_avert                      = icer_sample$case_avert,
case_avert_ipd                  = icer_sample$case_avert_ipd,
case_avert_opd                  = icer_sample$case_avert_opd,
incremental_cost_ipd            = icer_sample$incremental_cost_ipd,
incremental_cost_opd            = icer_sample$incremental_cost_opd,
incremental_cost_total          = icer_sample$incremental_cost_total,
pre_death_ipd                   = icer_sample$pre_death_ipd,
pre_death_opd                   = icer_sample$pre_death_opd,
pre_death_total                 = icer_sample$pre_death_total,
post_death_ipd                  = icer_sample$post_death_ipd,
post_death_opd                  = icer_sample$post_death_opd,
post_death_total                = icer_sample$post_death_total,
death_averted                   = icer_sample$death_averted,
death_averted_ipd               = icer_sample$death_averted_ipd,
death_averted_opd               = icer_sample$death_averted_opd,
yll_pre_ipd                     = icer_sample$yll_pre_ipd,
yll_pre_opd                     = icer_sample$yll_pre_opd,
yll_pre_total                   = icer_sample$yll_pre_total,
yll_post_ipd                    = icer_sample$yll_post_ipd,
yll_post_opd                    = icer_sample$yll_post_opd,
yll_post_total                  = icer_sample$yll_post_total,
yld_pre_ipd                     = icer_sample$yld_pre_ipd,
yld_pre_opd                     = icer_sample$yld_pre_opd,
yld_pre_total                   = icer_sample$yld_pre_total,
dalys_pre_total                 = icer_sample$dalys_pre_total,
yld_post_ipd                    = icer_sample$yld_post_ipd,
yld_post_opd                    = icer_sample$yld_post_opd,
yld_post_total                  = icer_sample$yld_post_total,
dalys_post_total                = icer_sample$dalys_post_total,
yld_averted_ipd                 = icer_sample$yld_averted_ipd,
yld_averted_opd                 = icer_sample$yld_averted_opd,
yld_averted_total               = icer_sample$yld_averted_total,
yll_averted_ipd                 = icer_sample$yll_averted_ipd,
yll_averted_opd                 = icer_sample$yll_averted_opd,
yll_averted_total               = icer_sample$yll_averted_total,
incremental_daly_ipd            = icer_sample$incremental_daly_ipd,
incremental_daly_opd            = icer_sample$incremental_daly_opd,
incremental_daly_total          = icer_sample$incremental_daly_total,
icer_daly_ipd                   = icer_sample$icer_daly_ipd,
icer_daly_opd                   = icer_sample$icer_daly_opd,
icer_daly_total                 = icer_sample$icer_daly_total
)]
}
View(icer_dt)
# icer plot
options(scipen=9999)
plot ( x = icer_dt$incremental_daly_total, y =icer_dt$incremental_cost_total)
# cea plane
cea_plane <- ggplot(data = icer_dt, aes(x=incremental_daly_total,
y=incremental_cost_total))+
geom_point() +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
xlab("DALYs averted") +
ylab("Incremental cost") +
theme_bw()
cea_plane
print(summary(icer_dt$icer_daly_total))
print(quantile(icer_dt$icer_daly_total, c(.5 , .025, .975 )))
prepost   <- rep(c("pre-vaccination", "post-vaccination"), 3)
case <- c(prevacc  = quantile(icer_dt$prevacc, c(0.5)),
postvacc = quantile(icer_dt$postvacc, c(0.5)))
ui_low    <- c(ui_pre_low      = quantile(icer_dt$prevacc, c(0.025)),
ui_post_low     = quantile(icer_dt$postvacc, c(0.025)))
ui_high    <- c(ui_pre_high      = quantile(icer_dt$prevacc, c(0.975)),
ui_post_high     = quantile(icer_dt$postvacc, c(0.97)))
data <- data.frame(case, prepost, ui_low, ui_high)
data <- data.frame(prepost           = factor(c("pre-vaccination","post-vaccination"),
levels = c("pre-vaccination", "post-vaccination")))
ggplot(data = data, aes(y =case, x = prepost))+
geom_bar(position="dodge", stat="identity")+
labs(x = "Pre-post", y = "case per 100,000 persons", fill = "vaccination status") +
theme_bw()
prepost   <- rep(c("pre-vaccination", "post-vaccination"), 3)
case <- c(prevacc  = quantile(icer_dt$prevacc, c(0.5)),
postvacc = quantile(icer_dt$postvacc, c(0.5)))
ui_low    <- c(ui_pre_low      = quantile(icer_dt$prevacc, c(0.025)),
ui_post_low     = quantile(icer_dt$postvacc, c(0.025)))
ui_high    <- c(ui_pre_high      = quantile(icer_dt$prevacc, c(0.975)),
ui_post_high     = quantile(icer_dt$postvacc, c(0.97)))
data <- data.frame(case, prepost, ui_low, ui_high)
data <- data.frame(prepost           = factor(c("pre-vaccination","post-vaccination"),
levels = c("pre-vaccination", "post-vaccination")))
ggplot(data = data, aes(y =case, x = prepost))+
geom_bar(position="dodge", stat="identity")+
geom_errorbar(aes(x = prepost, ymin = ui_low, ymax = ui_high),
width = 0.2, position=position_dodge(.9)) +
labs(x = "Age group", y = "case per 100,000 persons", fill = "vaccination status") +
theme_bw()
prepost   <- rep(c("pre-vaccination", "post-vaccination"), 3)
case <- c(prevacc  = quantile(icer_dt$prevacc, c(0.5)),
postvacc = quantile(icer_dt$postvacc, c(0.5)))
ui_low    <- c(ui_pre_low      = quantile(icer_dt$prevacc, c(0.025)),
ui_post_low     = quantile(icer_dt$postvacc, c(0.025)))
ui_high    <- c(ui_pre_high      = quantile(icer_dt$prevacc, c(0.975)),
ui_post_high     = quantile(icer_dt$postvacc, c(0.97)))
data <- data.frame(case, prepost, ui_low, ui_high)
data <- data.frame(prepost           = factor(c("pre-vaccination","post-vaccination"),
levels = c("pre-vaccination", "post-vaccination")))
ggplot(data = data, aes(y =case, x = prepost))+
geom_bar(position="dodge", stat="identity")+
geom_errorbar(aes(x = prepost, ymin = ui_low, ymax = ui_high),
width = 0.2, position=position_dodge(.9)) +
labs(x = "Vaccination status", y = "case per 100,000 persons") +
theme_bw()
prepost   <- rep(c("pre-vaccination", "post-vaccination"), 3)
case      <- c(predeath          = quantile(icer_dt$pre_death_total, c(0.5)),
postdearh         = quantile(icer_dt$post_death_total, c(0.5)))
ui_low    <- c(ui_pre_low        = quantile(icer_dt$pre_death_total, c(0.025)),
ui_post_low       = quantile(icer_dt$post_death_total, c(0.025)))
ui_high   <- c(ui_pre_high       = quantile(icer_dt$pre_death_total, c(0.975)),
ui_post_high      = quantile(icer_dt$post_death_total, c(0.97)))
data <- data.frame(case, prepost, ui_low, ui_high)
data <- data.frame(prepost       = factor(c("pre-vaccination","post-vaccination"),
levels = c("pre-vaccination", "post-vaccination")))
ggplot(data = data, aes(y = case, x = prepost))+
geom_bar(position="dodge", stat="identity")+
geom_errorbar(aes(x = prepost, ymin = ui_low, ymax = ui_high),
width = 0.2, position=position_dodge(.9)) +
labs(x = "Vaccination status", y = "Deaths per 100,000 persons") +
theme_bw()
prepost   <- rep(c("pre-vaccination", "post-vaccination"), 3)
case      <- c(pre_ipd          = quantile(icer_dt$prevacc_ipd, c(0.5)),
post_ipd         = quantile(icer_dt$postvacc_ipd, c(0.5)))
ui_low    <- c(ui_pre_low        = quantile(icer_dt$prevacc_ipd, c(0.025)),
ui_post_low       = quantile(icer_dt$postvacc_ipd, c(0.025)))
ui_high   <- c(ui_pre_high       = quantile(icer_dt$prevacc_ipd, c(0.975)),
ui_post_high      = quantile(icer_dt$postvacc_ipd, c(0.97)))
data <- data.frame(case, prepost, ui_low, ui_high)
data <- data.frame(prepost       = factor(c("pre-vaccination","post-vaccination"),
levels = c("pre-vaccination", "post-vaccination")))
ggplot(data = data, aes(y = case, x = prepost))+
geom_bar(position="dodge", stat="identity")+
geom_errorbar(aes(x = prepost, ymin = ui_low, ymax = ui_high),
width = 0.2, position=position_dodge(.9)) +
labs(x = "Vaccination status", y = "Hospitalisation per 100,000 persons") +
theme_bw()
probability_cea <- seq(from=0, to= 1, by= .01)
wtp<- quantile(icer_dt$icer_daly_total, probability_cea)
wtp_dt <- as.data.table(wtp)
# wtp table with probs
wtp_prob <- cbind (wtp_dt, probability_cea)
# keep only positive wtp values (negative values are dominant values, no need to show)
wtp_post <- wtp_prob %>% filter(wtp > 0)
# ceac ggplot
ceac <- ggplot(data = wtp_post, aes(x = wtp, y = probability_cea)) +
geom_line(color = 'black') +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
xlab("Willingenss to pay") +
ylab("Probability of cost-effectiveness") +
theme_bw()
ceac
vertDf <- data.frame(wtp = c(166, 279, 2191), labels = c("lower-bound", "upper-bound", "GDP per capita 2021"))
# add two graphs
ceac + geom_vline(aes(xintercept = wtp, color = labels), data = vertDf, show.legend=T) +
scale_colour_manual("WTP", values = c("lower-bound" = "blue", "upper-bound" = "red", "GDP per capita 2021" = "green")) +
theme_bw() +
theme(legend.position = c(0.95, 0.95),
legend.justification = c("right", "top"))
View(wtp_post)
daeth_averted <- ggplot(data = data, aes(y = case, x = prepost))+
geom_bar(position="dodge", stat="identity")+
geom_errorbar(aes(x = prepost, ymin = ui_low, ymax = ui_high),
width = 0.2, position=position_dodge(.9)) +
labs(x = "Vaccination status", y = "Deaths per 100,000 persons") +
theme_bw()
death_averted + case_averted
figure <- ggarrange(case_averted, death_averted, ipd_averted,
labels = c("A", "B", "C"),
ncol   = 2, nrow = 2)
figure
install.packages("ggpubr")
install.packages("ggpubr")
figure <- ggarrange(case_averted, death_averted, ipd_averted,
labels = c("A", "B", "C"),
ncol   = 2, nrow = 2)
figure
install.packages("ggpubr")
figure <- ggarrange(case_averted, death_averted, ipd_averted,
labels = c("A", "B", "C"),
ncol   = 2, nrow = 2)
figure
library (ggpubr)
figure <- ggarrange(case_averted, death_averted, ipd_averted,
labels = c("A", "B", "C"),
ncol   = 2, nrow = 2)
figure
case_averted <- ggplot(data = data, aes(y =case, x = prepost))+
geom_bar(position="dodge", stat="identity")+
geom_errorbar(aes(x = prepost, ymin = ui_low, ymax = ui_high),
width = 0.2, position=position_dodge(.9)) +
labs(x = "Vaccination status", y = "case per 100,000 persons") +
theme_bw()
death_averted <- ggplot(data = data, aes(y = case, x = prepost))+
geom_bar(position="dodge", stat="identity")+
geom_errorbar(aes(x = prepost, ymin = ui_low, ymax = ui_high),
width = 0.2, position=position_dodge(.9)) +
labs(x = "Vaccination status", y = "Deaths per 100,000 persons") +
theme_bw()
ipd_averted <- ggplot(data = data, aes(y = case, x = prepost))+
geom_bar(position="dodge", stat="identity")+
geom_errorbar(aes(x = prepost, ymin = ui_low, ymax = ui_high),
width = 0.2, position=position_dodge(.9)) +
labs(x = "Vaccination status", y = "Hospitalisation per 100,000 persons") +
theme_bw()
figure <- ggarrange(case_averted, death_averted, ipd_averted,
labels = c("A", "B", "C"),
ncol   = 2, nrow = 2)
figure
ceac + geom_vline(aes(xintercept = wtp, color = labels), data = vertDf, show.legend=T) +
scale_colour_manual("WTP", values = c("lower-bound" = "blue", "upper-bound" = "red", "GDP per capita 2021" = "green")) +
theme_bw() +
theme(legend.position = c(0.95, 0.95),
legend.justification = c("right", "top"))
ipd_averted
figure
prepost   <- rep(c("pre-vaccination", "post-vaccination"), 3)
case      <- c(pre_daly          = quantile(icer_dt$dalys_pre_total, c(0.5)),
post_daly         = quantile(icer_dt$dalys_post_total, c(0.5)))
ui_low    <- c(ui_pre_low        = quantile(icer_dt$dalys_pre_total, c(0.025)),
ui_post_low       = quantile(icer_dt$dalys_post_total, c(0.025)))
ui_high   <- c(ui_pre_high       = quantile(icer_dt$dalys_pre_total, c(0.975)),
ui_post_high      = quantile(icer_dt$dalys_post_total, c(0.97)))
data <- data.frame(case, prepost, ui_low, ui_high)
data <- data.frame(prepost       = factor(c("pre-vaccination","post-vaccination"),
levels = c("pre-vaccination", "post-vaccination")))
daly_averted <- ggplot(data = data, aes(y = case, x = prepost))+
geom_bar(position="dodge", stat="identity")+
geom_errorbar(aes(x = prepost, ymin = ui_low, ymax = ui_high),
width = 0.2, position=position_dodge(.9)) +
labs(x = "Vaccination status", y = "DALYs per 100,000 persons") +
theme_bw()
daly_averted
pre_daly
quantile(icer_dt$dalys_pre_total, c(0.5)
figure <- ggarrange(case_averted, death_averted, ipd_averted, daly_averted
labels = c("A", "B", "C", "D"),
ncol   = 2, nrow = 2)
figure
figure <- ggarrange(case_averted, death_averted, ipd_averted, daly_averted,
labels = c("A", "B", "C", "D"),
ncol   = 2, nrow = 2)
figure
ceac + geom_vline(aes(xintercept = wtp, color = labels), data = vertDf, show.legend=T) +
scale_colour_manual("WTP", values = c("lower-bound" = "blue", "upper-bound" = "red", "GDP per capita 2021" = "green")) +
theme_bw() +
theme(legend.position = c(0.95, 0.95),
legend.justification = c("right", "top"))
