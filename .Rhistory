lhs_sample_s$life_exp             [i])
icer_dt_s [i, `:=` ( totcost_unvacc                  = icer_sample_s$totcost_unvacc,
totcost_vacc_ipd                = icer_sample_s$totcost_vacc_ipd,
totcost_vacc_opd                = icer_sample_s$totcost_vacc_opd,
totcost_vacc_tot                = icer_sample_s$totcost_vacc_tot,
incremental_cost_ipd            = icer_sample_s$incremental_cost_ipd,
incremental_cost_opd            = icer_sample_s$incremental_cost_opd,
prevacc_ipd                     = icer_sample_s$prevacc_ipd,
prevacc_opd                     = icer_sample_s$prevacc_opd,
prevacc                         = icer_sample_s$prevacc,
incremental_cost_total          = icer_sample_s$incremental_cost_total,
case_averted_ipd                = icer_sample_s$case_averted_ipd,
case_averted_opd                = icer_sample_s$case_averted_opd,
case_averted_total              = icer_sample_s$case_averted_total,
pre_death_ipd                   = icer_sample_s$pre_death_ipd,
pre_death_opd                   = icer_sample_s$pre_death_opd,
pre_death_total                 = icer_sample_s$pre_death_total,
post_death_ipd                  = icer_sample_s$post_death_ipd,
post_death_opd                  = icer_sample_s$post_death_opd,
post_death_total                = icer_sample_s$post_death_total,
dalys_pre_total                 = icer_sample_s$dalys_pre_total,
dalys_post_total                = icer_sample_s$dalys_post_total,
icer_daly_ipd                   = icer_sample_s$icer_daly_ipd,
icer_daly_opd                   = icer_sample_s$icer_daly_opd,
icer_daly_total                 = icer_sample_s$icer_daly_total,
death_averted                   = icer_sample_s$death_averted,
death_averted_ipd               = icer_sample_s$death_averted_ipd,
death_averted_opd               = icer_sample_s$death_averted_opd,
incremental_daly_total          = icer_sample_s$incremental_daly_total
)]
}
# central value
mean_cost                   <- mean(icer_dt_s$incremental_cost_total)
mean_case_averted           <- mean(icer_dt_s$case_averted_total)
mean_prevacc                <- mean(icer_dt_s$prevacc)
mean_icer_daly_ipd          <- mean(icer_dt_s$icer_daly_ipd)
mean_icer_daly_opd          <- mean(icer_dt_s$icer_daly_opd)
mean_icer_daly_total        <- mean(icer_dt_s$icer_daly_total)
mean_incremental_daly_total <- mean(icer_dt_s$incremental_daly_total)
# cea plane
ggplot(data = icer_dt_s, aes(x=incremental_daly_total,
y=incremental_cost_total))+
geom_point(color='blue') +
xlim(-5000, 5000) + ylim(-4000000, 4000000) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
xlab("DALYs averted") +
ylab("Incremental cost") +
theme_bw()
# uncertainty ranges
icer_ui_sc <- quantile(icer_dt_s$icer_daly_total, probs = seq(0, 1, 0.025))
icer_ui_sc <- as.data.table(icer_ui_sc)
icer_ui_sc$ui_interval <- seq(0, 100, 2.5)
# cost
cost_ui_unv_sc <- quantile(icer_dt_s$totcost_unvacc, probs = seq(0, 1, 0.025))
cost_ui_vac_sc <- quantile(icer_dt_s$totcost_vacc_tot, probs = seq(0, 1, 0.025))
cost_ui_unv_sc <- as.data.table(cost_ui_unv_sc)
cost_ui_vac_sc <- as.data.table(cost_ui_vac_sc)
cost_ui_unv_sc$ui_interval <- seq(0, 100, 2.5)
cost_ui_vac_sc$ui_interval <- seq(0, 100, 2.5)
# case (prevacc)
case_ui_unv_sc <- quantile(icer_dt_s$prevacc, probs = seq(0, 1, 0.025))
case_ui_unv_sc <- as.data.table(case_ui_unv_sc)
case_ui_unv_sc$ui_interval <- seq(0, 100, 2.5)
# case (difference)
case_avert_sc <- quantile(icer_dt_s$case_averted_total,probs = seq(0, 1, 0.025))
case_avert_sc <- as.data.table(case_avert_sc)
case_avert_sc$ui_interval <- seq(0, 100, 2.5)
# inpatient case
incase_unv_sc <- quantile(icer_dt_s$prevacc_ipd, probs = seq(0, 1, 0.025))
incase_unv_sc <- as.data.table(incase_unv_sc)
incase_vac_sc <- quantile(icer_dt_s$postvacc_p1_ipd, probs = seq(0, 1, 0.025))
incase_vac_sc <- as.data.table(incase_vac_sc)
incase_avt_sc <- quantile(icer_dt_s$case_averted_ipd, probs = seq(0, 1, 0.025))
incase_avt_sc <- as.data.table(incase_avt_sc)
incase_avt_sc$ui_interval <-seq(0, 100, 2.5)
incase_diff_sc <- cbind(incase_unv_sc, incase_vac_sc, incase_avt_sc)
# outpatient case
outcase_unv_sc <- quantile(icer_dt_s$prevacc_opd, probs = seq(0, 1, 0.025))
outcase_unv_sc <- as.data.table(outcase_unv_sc)
outcase_vac_sc <- quantile(icer_dt_s$postvacc_p1_opd, probs = seq(0, 1, 0.025))
outcase_vac_sc <- as.data.table(outcase_vac_sc)
outcase_avt_sc <- quantile(icer_dt_s$case_averted_opd, probs = seq(0, 1, 0.025))
outcase_avt_sc <- as.data.table(outcase_avt_sc)
outcase_avt_sc$ui_interval <-seq(0, 100, 2.5)
outcase_diff_sc <- cbind(outcase_unv_sc, outcase_vac_sc, outcase_avt_sc)
# IPD deaths (prevacc)
death_ipd_unv_sc   <- quantile(icer_dt_s$pre_death_ipd, probs = seq(0, 1, 0.025))
death_ipd_unv_sc   <- as.data.table(death_ipd_unv_sc)
# IPD deaths (postvacc)
death_ipd_vac_sc   <- quantile(icer_dt_s$post_death_ipd, probs = seq(0, 1, 0.025))
death_ipd_vac_sc   <- as.data.table(death_ipd_vac_sc)
# IPD deaths (diff)
death_ipd_avert_sc  <- quantile(icer_dt_s$death_averted_ipd, probs = seq(0, 1, 0.025))
death_ipd_avert_sc  <- as.data.table(death_ipd_avert_sc)
death_ipd_avert_sc$ui_interval <-seq(0, 100, 2.5)
death_ipd_sc <- cbind(death_ipd_unv_sc, death_ipd_vac_sc, death_ipd_avert_sc)
# OPD deaths
death_opd_unv_sc   <- quantile(icer_dt_s$pre_death_opd, probs = seq(0, 1, 0.025))
death_opd_unv_sc   <- as.data.table(death_opd_unv_sc)
death_opd_vac_sc   <- quantile(icer_dt_s$post_death_opd, probs = seq(0, 1, 0.025))
death_opd_vac_sc   <- as.data.table(death_opd_vac_sc)
death_opd_avert_sc <- quantile(icer_dt_s$death_averted_opd, probs = seq(0, 1, 0.025))
death_opd_avert_sc <- as.data.table(death_opd_avert_sc)
death_opd_avert_sc$ui_interval <-seq(0, 100, 2.5)
death_opd_sc       <- cbind(death_opd_unv_sc, death_opd_vac_sc, death_opd_avert_sc)
# deaths (prevacc)
deaths_ui_unv_sc <- quantile(icer_dt_s$pre_death_total, probs = seq(0, 1, 0.025))
deaths_ui_unv_sc <- as.data.table(deaths_ui_unv_sc)
# deaths (postvacc)
deaths_ui_vac_sc <- quantile(icer_dt_s$post_death_total, probs = seq(0, 1, 0.025))
deaths_ui_vac_sc <- as.data.table(deaths_ui_vac_sc)
# deaths (difference)
death_avert_sc   <- quantile(icer_dt_s$death_averted, probs = seq(0, 1, 0.025))
death_avert_sc   <- as.data.table(death_avert_sc)
death_avert_sc$ui_interval <-  seq(0, 100, 2.5)
death_diff_sc    <- cbind(deaths_ui_unv_sc, deaths_ui_vac_sc, death_avert_sc)
# dalys (prevacc)
daly_ui_unv_sc   <- quantile(icer_dt_s$dalys_pre_total, probs = seq(0, 1, 0.025))
daly_ui_unv_sc   <- as.data.table(daly_ui_unv_sc)
# dalys (postvacc)
daly_ui_vac_sc   <- quantile(icer_dt_s$dalys_post_total, probs = seq(0, 1, 0.025))
daly_ui_vac_sc   <- as.data.table(daly_ui_vac_sc)
# incremental daly
inc_daly_sc      <- quantile(icer_dt_s$incremental_daly_total, probs = seq(0, 1, 0.025))
inc_daly_sc      <- as.data.table(inc_daly_sc)
inc_daly_sc$ui_interval <- seq(0, 100, 2.5)
# combine daly difference table
daly_diff_sc <- cbind(daly_ui_unv_sc, daly_ui_vac_sc, inc_daly_sc)
# ceac
print(summary(icer_dt_s$icer_daly_total))
print(quantile(icer_dt_s$icer_daly_total, c(.5 , .025, .975 )))
probability_cea <- seq(from=0, to= 1, by= .01)
wtp_scenario <- quantile(icer_dt_s$icer_daly_total, probability_cea)
wtp_dt_scenario <- as.data.table(wtp_scenario)
wtp_prob_scenario <- cbind (wtp_dt_scenario, probability_cea)
# keep only positive wtp values
wtp_post_scenario <- wtp_prob_scenario %>% filter(wtp_scenario > 0)
# ceac ggplot
ceac_scenario <- ggplot(data = wtp_post_scenario, aes(x = wtp_scenario, y = probability_cea)) +
geom_line(color = 'red', size = 0.8) +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0))
# add two ceac graphs
ceac_all <-
ggplot()+
geom_line(data = wtp_post, aes(x = wtp, y = probability_cea), color = "blue")+
geom_line(data = wtp_post_scenario, aes(x = wtp_scenario, y = probability_cea),
color = "red") +
scale_x_continuous(expand = c(0,0),
breaks = seq(0, 10000, by = 500)) +
scale_y_continuous(expand = c(0,0)) +
xlab('WTP at DALYs averted (USD)') +
ylab('probability (%)') +
theme_bw ()
# ------------------------------------------------------------------------------
# function - icer calculation
# icer calculation - add three columns
# (i)   icer_mid for mid value of each parameter (should be same value for all parameters)
# (ii)  icer_low for low value of each parameter while other parameters have mid values
# (iii) icer_high for high value of each parameter while other parameters have mid values
# ------------------------------------------------------------------------------
icer_calc <- function (param_dt) {
# add 3 empty columns for icer - mid, low, high (columns 5, 6, 7)
param_dt [, icer_mid  := 0]
param_dt [, icer_low  := 0]
param_dt [, icer_high := 0]
# loop through parameters
for (i in 1:nrow (param_dt)) {
# loop through mid, low, and high values (which are in columns 2, 3, 4)
for (j in 2:4) {
# select the mid value for each parameter
v_cost               <- param_dt [parameter == "v_cost",               mid ]
delivery_cost        <- param_dt [parameter == "delivery_cost",        mid ]
tot_pop              <- param_dt [parameter == "tot_pop",              mid ]
vacc_pop             <- param_dt [parameter == "vacc_pop",             mid ]
postvacc_p1_ipd      <- param_dt [parameter == "postvacc_p1_ipd",      mid ]
postvacc_p1_opd      <- param_dt [parameter == "postvacc_p1_opd",      mid ]
postvacc_p1          <- param_dt [parameter == "postvacc_p1",          mid ]
facility_cost        <- param_dt [parameter == "facility_cost",        mid ]
dmc_ipd              <- param_dt [parameter == "dmc_ipd",              mid ]
dmc_opd              <- param_dt [parameter == "dmc_opd",              mid ]
dmc                  <- param_dt [parameter == "dmc",                  mid ]
dnmc_ipd             <- param_dt [parameter == "dnmc_ipd",             mid ]
dnmc_opd             <- param_dt [parameter == "dnmc_opd",             mid ]
dnmc                 <- param_dt [parameter == "dnmc",                 mid ]
indirect_ipd         <- param_dt [parameter == "indirect_ipd",         mid ]
indirect_opd         <- param_dt [parameter == "indirect_opd",         mid ]
indirect             <- param_dt [parameter == "indirect",             mid ]
ve                   <- param_dt [parameter == "ve",                   mid ]
dw_ipd               <- param_dt [parameter == "dw_ipd",               mid ]
dw_opd               <- param_dt [parameter == "dw_opd",               mid ]
dw                   <- param_dt [parameter == "dw",                   mid ]
illness_duration_ipd <- param_dt [parameter == "illness_duration_ipd", mid ]
illness_duration_opd <- param_dt [parameter == "illness_duration_opd", mid ]
cfr_ipd              <- param_dt [parameter == "cfr_ipd",              mid ]
cfr_opd              <- param_dt [parameter == "cfr_opd",              mid ]
age_death            <- param_dt [parameter == "age_death",            mid ]
life_exp             <- param_dt [parameter == "life_exp",             mid ]
# ------------------------------------------------------------------------
# assign value for a specific parameter to mid/low/high values
assign (x     = param_dt [i, parameter],
value = param_dt [i, j, with = FALSE] )
# ------------------------------------------------------------------------
# ------------------------------------------------------------------------
# formulas for icer
totcost_vacc_ipd       <- (v_cost + delivery_cost) * (vacc_pop) + (postvacc_p1_ipd) * (facility_cost + dmc_ipd + dnmc_ipd + indirect_ipd)
totcost_vacc_opd       <- (v_cost + delivery_cost) * (vacc_pop) + (postvacc_p1_opd) * (facility_cost + dmc_opd + dnmc_opd + indirect_opd)
totcost_vacc_tot       <- (v_cost + delivery_cost) * (vacc_pop) + (postvacc_p1_ipd) * (facility_cost + dmc_ipd + dnmc_ipd + indirect_ipd) + (postvacc_p1_opd) * (facility_cost + dmc_opd + dnmc_opd + indirect_opd)
prevacc_ipd            <- (postvacc_p1_ipd)/(1-ve*(vacc_pop/tot_pop))
prevacc_opd            <- (postvacc_p1_opd)/(1-ve*(vacc_pop/tot_pop))
prevacc                <- (prevacc_ipd)  + (prevacc_opd)
totcost_unvacc         <- (prevacc)*(facility_cost + dmc + dnmc + indirect)
incremental_cost_ipd   <- (totcost_vacc_ipd) - (totcost_unvacc)
incremental_cost_opd   <- (totcost_vacc_opd) - (totcost_unvacc)
incremental_cost_total <- (totcost_vacc_tot) - (totcost_unvacc)
case_averted_ipd       <- (prevacc_ipd)      - (postvacc_p1_ipd)
case_averted_opd       <- (prevacc_opd)      - (postvacc_p1_opd)
case_averted_total     <- (case_averted_ipd) + (case_averted_opd)
icer_ipd               <- incremental_cost_ipd / case_averted_ipd
icer_opd               <- incremental_cost_opd / case_averted_opd
icer_tot               <- incremental_cost_total / case_averted_total
distance               <- (life_exp) - (age_death)
pre_death_ipd          <- (cfr_ipd)*(prevacc_ipd)
pre_death_opd          <- (cfr_opd)*(prevacc_opd)
pre_death_total        <- (pre_death_ipd) + (pre_death_opd)
post_death_ipd         <- (cfr_ipd)*(postvacc_p1_ipd)
post_death_opd         <- (cfr_opd)*(postvacc_p1_opd)
post_death_total       <-  (post_death_ipd) + (post_death_opd)
death_averted          <-  (pre_death_total) - (post_death_total)
death_averted_ipd      <-  (pre_death_ipd) - (post_death_ipd)
death_averted_opd      <-  (pre_death_opd) - (post_death_opd)
yll_pre_ipd            <- (pre_death_ipd)*(distance)
yll_pre_opd            <- (pre_death_opd)*(distance)
yll_pre_total          <- (yll_pre_ipd)  + (yll_pre_opd)
yll_post_ipd           <- (post_death_ipd)*(distance)
yll_post_opd           <- (post_death_opd)*(distance)
yll_post_total         <- (yll_post_ipd) + (yll_post_opd)
yld_pre_ipd            <- (prevacc_ipd)*(dw_ipd)*(illness_duration_ipd)
yld_pre_opd            <- (prevacc_opd)*(dw_opd)*(illness_duration_opd)
yld_pre_total          <- (yld_pre_ipd) + (yld_pre_opd)
dalys_pre_total        <- (yll_pre_total) + (yld_pre_total)
yld_post_ipd           <- (postvacc_p1_ipd)*(dw_ipd)*(illness_duration_ipd)
yld_post_opd           <- (postvacc_p1_opd)*(dw_opd)*(illness_duration_opd)
yld_post_total         <- (yld_post_ipd) + (yld_post_opd)
dalys_post_total       <- (yll_post_total) + (yld_post_total)
yld_averted_ipd        <- (prevacc_ipd - postvacc_p1_ipd)* (dw_ipd) *(illness_duration_ipd)
yld_averted_opd        <- (prevacc_opd - postvacc_p1_opd)* (dw_opd) *(illness_duration_opd)
yld_averted_total      <- (yld_averted_ipd) + (yld_averted_opd)
yll_averted_ipd        <- (yll_pre_ipd)  -(yll_post_ipd)
yll_averted_opd        <- (yll_pre_opd)  -(yll_post_opd)
yll_averted_total      <- (yll_averted_ipd) + (yll_averted_opd)
incremental_daly_ipd   <- (yld_averted_ipd) + (yll_averted_ipd)
incremental_daly_opd   <- (yld_averted_opd) + (yll_averted_opd)
incremental_daly_total <- (yll_averted_total) + (yld_averted_total)
icer_daly_ipd          <- incremental_cost_ipd / incremental_daly_ipd
icer_daly_opd          <- incremental_cost_opd / incremental_daly_opd
icer_daly_total        <- incremental_cost_total / incremental_daly_total
# ----------------------------------------------------------------------
# ------------------------------------------------------------------------
# save icer_daly value to corresponding row and column
# note: icer (mid, low, high) columns are 3 columns after parameter (mid, low, high) columns
param_dt [i, j + 3] <- icer_daly_total
# ----------------------------------------------------------------------
} # end of -- loop through mid, low, and high values
} # end of -- loop through parameters
# return data table with 3 additional columns for icer - mid, low, high
return (param_dt)
} # end of function - icer calculation
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
# main program (start)
# ------------------------------------------------------------------------------
tornado_param <- sapply (lhs_sample, function(x) quantile(x, probs = seq(0, 1, 0.025)))
tornado_param <- as.data.table(tornado_param)
tornado_param$ui_interval <- seq(0, 100, 2.5)
tornado_param_low  <- tornado_param %>% filter(ui_interval == 2.5)
tornado_param_mid  <- tornado_param %>% filter(ui_interval == 50)
tornado_param_high <- tornado_param %>% filter(ui_interval == 97.5)
tornado_param_all  <- rbind (tornado_param_low, tornado_param_mid, tornado_param_high)
# initialise parameter data table
param <- data.frame (v_cost               = c (mid = 2.96,   low = 2.96,   high = 2.96),
delivery_cost        = c (mid = 1.489151,   low = 1.372637,  high = 1.611899),
tot_pop              = c (mid = 159831, low = 159831, high = 159831),
vacc_pop             = c (mid = 113420, low = 113420, high = 113420),
postvacc_p1_ipd      = c (mid = 200,     low = 200,     high = 200),
postvacc_p1_opd      = c (mid = 459,     low = 459,     high = 459),
postvacc_p1          = c (mid = 659,     low = 659,     high = 659),
facility_cost        = c (mid = 93.72781,  low = 72.05578, high = 119.42376 ),
dmc_ipd              = c (mid = 145.085922, low = 2.443228, high = 963.940431),
dmc_opd              = c (mid = 60.1547144, low = 0.3206837, high = 535.8029029),
dmc                  = c (mid = 100.4446615, low = 0.7537101, high = 822.2790403 ),
dnmc_ipd             = c (mid = 39.421173,  low = 4.440873,  high = 144.388621),
dnmc_opd             = c (mid = 12.3908994,  low = 0.1278219,  high = 93.308175),
dnmc                 = c (mid = 26.416384,  low = 1.219572,  high = 130.697268),
indirect_ipd         = c (mid = 73.83249,  low = 31.05202, high = 144.91829),
indirect_opd         = c (mid = 71.07460,  low = 31.30255, high = 135.47818),
indirect             = c (mid = 72.67934,  low = 31.25501, high = 140.55149),
ve                   = c (mid = 0.8285294,   low = 0.4651203,   high = 0.9841985),
dw_ipd               = c (mid = 0.2099958,  low =0.1907379,  high = 0.2298767),
dw_opd               = c (mid = 0.05139319,  low =0.03475859,  high = 0.07320066),
illness_duration_ipd = c (mid = 1.362,  low = 1.30890, high = 4.3047),
illness_duration_opd = c (mid = 0.04154,  low = 0.010775, high = 0.106362),
cfr_ipd              = c (mid = 0.02780828,  low = 0.02057399,  high = 0.03651082),
cfr_opd              = c (mid = 0.01863717,  low = 0.01107713,  high = 0.02896699),
age_death            = c (mid = 7.547850,    low = 6.562944,  high = 8.624685),
life_exp             = c (mid = 72.67957,  low = 69.27136, high = 76.08917) )
# transpose the table
param_table <- data.frame (t(param))
# change to data table
param_table <- setDT (param_table)
# give name to each column
names (param_table)   <- rownames (param)
# add parameter column
param_table$parameter <- colnames (param)
# set parameter as first column (column reordering)
setcolorder (x        = param_table,
neworder = "parameter")
# icer calculation - add three columns
# (i)   icer_mid for mid value of each parameter (should be same value for all parameters)
# (ii)  icer_low for low value of each parameter while other parameters have mid values
# (iii) icer_high for high value of each parameter while other parameters have mid values
param_table <- icer_calc (param_dt = param_table)
# Note:
# When a parameter takes a low/high value in comparison to mid value, icer value
# can decrease/increase depending on the relationship in the same/inverse direction.
# ------------------------------------------------------------------------------
# basic tornado plot
param_table <- param_table[-c(1,3,4,5,6,7)]
# length of the ICER diff (high - low)
param_table <- param_table %>%
mutate(length = (icer_high) - (icer_low))
param_table <- arrange(param_table, length)
# absolute value of length
param_table$length_abs <- abs(param_table$length)
# arrange the table again by the order of absolute value
param_table <- param_table %>%
arrange(desc(length_abs))
# tornado plot
tornado_plot <- ggplot (param_table,
aes (reorder(parameter, length_abs),
ymin = icer_low,
ymax = icer_high,
color = parameter)) +
geom_linerange (size = 5) +
geom_hline (yintercept = param_table$icer_mid [1],
linetype   = "dotted") +
xlab ("parameter") +
ylab ("ICER (cost per DALY averted)") +
coord_flip() +
theme_bw ()
print (tornado_plot)
# ------------------------------------------------------------------------------
# ------------------------------------------------------------------------------
toc ()
# main program (end)
# ------------------------------------------------------------------------------
ggplot(data = icer_dt_s, aes(x=incremental_daly_total,
y=incremental_cost_total))+
geom_point(color='blue') +
xlim(-5000, 5000) + ylim(-4000000, 4000000) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
xlab("DALYs averted") +
ylab("Incremental cost") +
theme_bw()
ggplot(data = icer_dt, aes(x=incremental_daly_total,
y=incremental_cost_total))+
geom_point() +
xlim(-5000, 5000) + ylim(-4000000, 4000000) +
geom_hline(yintercept = 0) +
geom_vline(xintercept = 0) +
xlab("DALYs averted") +
ylab("Incremental cost") +
theme_bw()
print(summary(icer_dt$icer_daly_total))
print(quantile(icer_dt$icer_daly_total, c(.5 , .025, .975 )))
# uncertainty ranges
icer_ui <- quantile(icer_dt$icer_daly_total, probs = seq(0, 1, 0.025))
icer_ui <- as.data.table(icer_ui)
# uncertainty interval table (icer)
icer_ui$ui_interval <- seq(0, 100, 2.5)
# cost
cost_ui_unv <- quantile(icer_dt$totcost_unvacc, probs = seq(0, 1, 0.025))
cost_ui_vac <- quantile(icer_dt$totcost_vacc_tot, probs = seq(0, 1, 0.025))
cost_ui_unv <- as.data.table(cost_ui_unv)
cost_ui_vac <- as.data.table(cost_ui_vac)
cost_ui_unv$ui_interval <- seq(0, 100, 2.5)
cost_ui_vac$ui_interval <- seq(0, 100, 2.5)
# case (prevacc)
case_ui_unv <- quantile(icer_dt$prevacc, probs = seq(0, 1, 0.025))
case_ui_unv <- as.data.table(case_ui_unv)
case_ui_unv$ui_interval <- seq(0, 100, 2.5)
# case (difference)
case_avert <- quantile(icer_dt$case_averted_total,probs = seq(0, 1, 0.025))
case_avert <- as.data.table(case_avert)
case_avert$ui_interval <- seq(0, 100, 2.5)
# inpatient case
incase_unv <- quantile(icer_dt$prevacc_ipd, probs = seq(0, 1, 0.025))
incase_unv <- as.data.table(incase_unv)
incase_vac <- quantile(icer_dt$postvacc_p1_ipd, probs = seq(0, 1, 0.025))
incase_vac <- as.data.table(incase_vac)
incase_avt <- quantile(icer_dt$case_averted_ipd, probs = seq(0, 1, 0.025))
incase_avt <- as.data.table(incase_avt)
incase_avt$ui_interval <-seq(0, 100, 2.5)
incase_diff <- cbind(incase_unv, incase_vac, incase_avt)
# outpatient case
outcase_unv <- quantile(icer_dt$prevacc_opd, probs = seq(0, 1, 0.025))
outcase_unv <- as.data.table(outcase_unv)
outcase_vac <- quantile(icer_dt$postvacc_p1_opd, probs = seq(0, 1, 0.025))
outcase_vac <- as.data.table(outcase_vac)
outcase_avt <- quantile(icer_dt$case_averted_opd, probs = seq(0, 1, 0.025))
outcase_avt <- as.data.table(outcase_avt)
outcase_avt$ui_interval <-seq(0, 100, 2.5)
outcase_diff <- cbind(outcase_unv, outcase_vac, outcase_avt)
# IPD deaths (prevacc)
death_ipd_unv   <- quantile(icer_dt$pre_death_ipd, probs = seq(0, 1, 0.025))
death_ipd_unv   <- as.data.table(death_ipd_unv)
# IPD deaths (postvacc)
death_ipd_vac   <- quantile(icer_dt$post_death_ipd, probs = seq(0, 1, 0.025))
death_ipd_vac   <- as.data.table(death_ipd_vac)
# IPD deaths (diff)
death_ipd_avert  <- quantile(icer_dt$death_averted_ipd, probs = seq(0, 1, 0.025))
death_ipd_avert  <- as.data.table(death_ipd_avert)
death_ipd_avert$ui_interval <-seq(0, 100, 2.5)
death_ipd <- cbind(death_ipd_unv, death_ipd_vac, death_ipd_avert)
# OPD deaths
death_opd_unv   <- quantile(icer_dt$pre_death_opd, probs = seq(0, 1, 0.025))
death_opd_unv   <- as.data.table(death_opd_unv)
death_opd_vac   <- quantile(icer_dt$post_death_opd, probs = seq(0, 1, 0.025))
death_opd_vac   <- as.data.table(death_opd_vac)
death_opd_avert <- quantile(icer_dt$death_averted_opd, probs = seq(0, 1, 0.025))
death_opd_avert <- as.data.table(death_opd_avert)
death_opd_avert$ui_interval <-seq(0, 100, 2.5)
death_opd       <- cbind(death_opd_unv, death_opd_vac, death_opd_avert)
# deaths (prevacc)
deaths_ui_unv <- quantile(icer_dt$pre_death_total, probs = seq(0, 1, 0.025))
deaths_ui_unv <- as.data.table(deaths_ui_unv)
# deaths (postvacc)
deaths_ui_vac <- quantile(icer_dt$post_death_total, probs = seq(0, 1, 0.025))
deaths_ui_vac <- as.data.table(deaths_ui_vac)
# deaths (difference)
death_avert   <- quantile(icer_dt$death_averted, probs = seq(0, 1, 0.025))
death_avert   <- as.data.table(death_avert)
death_avert$ui_interval <-  seq(0, 100, 2.5)
death_diff    <- cbind(deaths_ui_unv, deaths_ui_vac, death_avert)
# dalys (prevacc)
daly_ui_unv   <- quantile(icer_dt$dalys_pre_total, probs = seq(0, 1, 0.025))
daly_ui_unv   <- as.data.table(daly_ui_unv)
# dalys (postvacc)
daly_ui_vac   <- quantile(icer_dt$dalys_post_total, probs = seq(0, 1, 0.025))
daly_ui_vac   <- as.data.table(daly_ui_vac)
# incremental daly
inc_daly      <- quantile(icer_dt$incremental_daly_total, probs = seq(0, 1, 0.025))
inc_daly      <- as.data.table(inc_daly)
inc_daly$ui_interval <- seq(0, 100, 2.5)
# combine daly difference table
daly_diff <- cbind(daly_ui_unv, daly_ui_vac,inc_daly)
probability_cea <- seq(from=0, to= 1, by= .01)
wtp<- quantile(icer_dt$icer_daly_total, probability_cea)
wtp_dt <- as.data.table(wtp)
wtp_prob <- cbind (wtp_dt, probability_cea)
# keep only positive wtp values
wtp_post <- wtp_prob %>% filter(wtp > 0)
# ceac ggplot
ceac <- ggplot(data = wtp_post, aes(x = wtp, y = probability_cea)) +
geom_line(color = 'darkblue') +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0))
ceac
View(icer_ui)
View(case_ui_unv)
View(case_ui_unv)
View(case_avert)
View(incase_unv)
View(incase_vac)
View(incase_diff)
View(outcase_diff)
View(death_diff)
View(death_ipd_unv)
View(death_ipd_avert)
View(death_ipd_unv)
View(death_ipd_sc)
View(death_ipd)
View(death_opd)
View(daly_diff)
ceac <- ggplot(data = wtp_post, aes(x = wtp, y = probability_cea)) +
geom_line(color = 'darkblue') +
scale_x_continuous(expand = c(0,0)) +
scale_y_continuous(expand = c(0,0)) +
theme_bw()
ceac
View(wtp_prob)
View(case_ui_unv_sc)
View(case_avert_sc)
View(case_ui_unv_sc)
View(death_ipd_sc)
View(incase_diff_sc)
View(outcase_diff_sc)
View(deaths_ui_unv_sc)
View(deaths_ui_vac)
View(deaths_ui_vac_sc)
View(death_avert_sc)
View(death_diff_sc)
View(death_opd_sc)
View(daly_diff_sc)
113420/331418
113420/159831
ceac_all
tornado_plot
param_table
View(param_table)
