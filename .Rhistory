# input samples for PSA
my_psa <- gen_psa_samp (params                 = my_params,
dists                  = my_dists,
parameterization_types = my_parameterization_types,
dists_params           = my_dists_params,
n                      = sample_n)
library ("data.table")
library ("dampack")
library ("data.table")
rm (list = ls())
# function
# create psa samples for input parameters
create_psa_sample <- function (sample_n) {
# parameters
my_params <-c ("v_cost",          # vaccine cost
"facility_cost",   # health facility cost
"dmc",             # direct medical cost
"dnmc",            # direct non-medical cost
"indirect",        # indirect cost
"ve",              # vaccine-effectiveness
"prevacc",         # pre-vaccination case
"postvacc",        # post-vaccination case
"totcost_vacc",    # total cost of vaccinated group
"totcost_unvacc")  # total cost of unvaccinated group
# distributions for parameters
my_dists <- c("log-normal",
"log-normal",
"log-normal",
"log-normal",
"log-normal",
"truncated-normal",
"log-normal",
"log-normal",
"log-normal",
"log-normal")
# paramter types
my_parameterization_types <-c ("mean, sd",
"mean, sd",
"mean, sd",
"mean, sd",
"mean, sd",
"mean, sd, ll, ul",
"mean, sd",
"mean, sd",
"mean, sd",
"mean, sd")
# values for parameters
my_dists_params <- list( c (4.45,   0.22673),
c (58.64,  0.1136),
c (183.07, 229.31),
c (30.13,  31.06),
c (110.95, 26.58),
c (.87,     0.02666667, .79, .95),
c(384, 0.487),
c(50, 0.5),
c(1044187.37, 0.23),
c(147226.92, 0.59))
# input samples for PSA
my_psa <- gen_psa_samp (params                 = my_params,
dists                  = my_dists,
parameterization_types = my_parameterization_types,
dists_params           = my_dists_params,
n                      = sample_n)
return (my_psa)
}
# function - computer icer for a given input parameter sample
compute_icer <- function (v_cost,          # vaccine cost
facility_cost,   # health facility cost
dmc,
dnmc,
indirect,
ve,
prevacc,
postvacc,
totcost_vacc,
totcost_unvacc) {
# estimate icer
return (icer)
}
# main program
# ------------------------------------------------------------------------------
sample_size <- 1000
# create psa sample
psa_sample <- create_psa_sample (sample_n = sample_size)
# create empty icer data table
icer_dt <- data.table (icer = 1:sample_size)
# loop through psa sample to generate icers
for (i in 1:sample_size) {
icer_sample <- compute_icer (psa_sample$v_cost [i],          # vaccine cost
psa_sample$facility_cost [i],   # health facility cost
psa_sample$dmc [i],
psa_sample$dnmc [i],
psa_sample$indirect [i],
psa_sample$ve [i],
psa_sample$prevacc [i],
psa_sample$postvacc [i],
psa_sample$totcost_vacc [i],
psa_sample$totcost_unvacc [i])
icer_dt [i, icer := icer_sample]
}
# create plot
# http://r-statistics.co/ggplot2-Tutorial-With-R.html
# test sample visualization
hist (psa_sample$ve)
View(psa_sample)
# cost-effectiveness
# load library
library ("dampack")
library ("data.table")
# clear workspace
rm (list = ls())
# function
# create psa samples for input parameters
create_psa_sample <- function (sample_n) {
# parameters
my_params <-c ("v_cost",          # vaccine cost
"facility_cost",   # health facility cost
"dmc",             # direct medical cost
"dnmc",            # direct non-medical cost
"indirect",        # indirect cost
"ve",              # vaccine-effectiveness
"prevacc",         # pre-vaccination case
"postvacc",        # post-vaccination case
"totcost_vacc",    # total cost of vaccinated group
"totcost_unvacc")  # total cost of unvaccinated group
# distributions for parameters
my_dists <- c("log-normal",
"log-normal",
"log-normal",
"log-normal",
"log-normal",
"truncated-normal",
"log-normal",
"log-normal",
"log-normal",
"log-normal")
# paramter types
my_parameterization_types <-c ("mean, sd",
"mean, sd",
"mean, sd",
"mean, sd",
"mean, sd",
"mean, sd, ll, ul",
"mean, sd",
"mean, sd",
"mean, sd",
"mean, sd")
# values for parameters
my_dists_params <- list( c (4.45,   0.22673),
c (58.64,  0.1136),
c (183.07, 229.31),
c (30.13,  31.06),
c (110.95, 26.58),
c (.87,     0.02666667, .79, .95),
c(384, 0.487),
c(50, 0.5),
c(1044187.37, 0.23),
c(147226.92, 0.59))
# input samples for PSA
my_psa <- gen_psa_samp (params                 = my_params,
dists                  = my_dists,
parameterization_types = my_parameterization_types,
dists_params           = my_dists_params,
n                      = sample_n)
return (my_psa)
}
# function - computer icer for a given input parameter sample
compute_icer <- function (v_cost,          # vaccine cost
facility_cost,   # health facility cost
dmc,
dnmc,
indirect,
ve,
prevacc,
postvacc,
totcost_vacc,
totcost_unvacc) {
# estimate icer
return (icer)
}
# main program
# ------------------------------------------------------------------------------
sample_size <- 1000
# create psa sample
psa_sample <- create_psa_sample (sample_n = sample_size)
# create empty icer data table
icer_dt <- data.table (icer = 1:sample_size)
# loop through psa sample to generate icers
for (i in 1:sample_size) {
icer_sample <- compute_icer (psa_sample$v_cost [i],          # vaccine cost
psa_sample$facility_cost [i],   # health facility cost
psa_sample$dmc [i],
psa_sample$dnmc [i],
psa_sample$indirect [i],
psa_sample$ve [i],
psa_sample$prevacc [i],
psa_sample$postvacc [i],
psa_sample$totcost_vacc [i],
psa_sample$totcost_unvacc [i])
icer_dt [i, icer := icer_sample]
}
# create plot
# http://r-statistics.co/ggplot2-Tutorial-With-R.html
# test sample visualization
hist (psa_sample$ve)
my_psa
my_psa <- gen_psa_samp (params                 = my_params,
dists                  = my_dists,
parameterization_types = my_parameterization_types,
dists_params           = my_dists_params,
n                      = sample_n)
return (my_psa)
}
# create psa samples for input parameters
create_psa_sample <- function (sample_n) {
# parameters
my_params <-c ("v_cost",          # vaccine cost
"facility_cost",   # health facility cost
"dmc",             # direct medical cost
"dnmc",            # direct non-medical cost
"indirect",        # indirect cost
"ve",              # vaccine-effectiveness
"prevacc",         # pre-vaccination case
"postvacc",        # post-vaccination case
"totcost_vacc",    # total cost of vaccinated group
"totcost_unvacc")  # total cost of unvaccinated group
# distributions for parameters
my_dists <- c("log-normal",
"log-normal",
"log-normal",
"log-normal",
"log-normal",
"truncated-normal",
"log-normal",
"log-normal",
"log-normal",
"log-normal")
# paramter types
my_parameterization_types <-c ("mean, sd",
"mean, sd",
"mean, sd",
"mean, sd",
"mean, sd",
"mean, sd, ll, ul",
"mean, sd",
"mean, sd",
"mean, sd",
"mean, sd")
# values for parameters
my_dists_params <- list( c (4.45,   0.22673),
c (58.64,  0.1136),
c (183.07, 229.31),
c (30.13,  31.06),
c (110.95, 26.58),
c (.87,     0.02666667, .79, .95),
c(384, 0.487),
c(50, 0.5),
c(1044187.37, 0.23),
c(147226.92, 0.59))
# input samples for PSA
my_psa <- gen_psa_samp (params                 = my_params,
dists                  = my_dists,
parameterization_types = my_parameterization_types,
dists_params           = my_dists_params,
n                      = sample_n)
return (my_psa)
}
my_psa
